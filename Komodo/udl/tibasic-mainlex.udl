# UDL for TIBasic

language TIBasic

family markup
sublanguage BasicML
initial IN_M_DEFAULT

# We could put torquescript stuff here, or Torque ML stuff
# Null-transition to get into SSL state
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT



family ssl
sublanguage TIBasic

start_style SSL_DEFAULT
end_style SSL_VARIABLE

#...

keywords [NL TAB SPC or break return else assert while do if for continue function new singleton datablock case 'switch$' switch default package 'namespace']
# If the language has keywords, specify which style needs to be transformed

keyword_style SSL_IDENTIFIER => SSL_WORD

# Some info on the styles we're using here

# VARMID   [:A-Za-z0-9_]
# IDTAIL   [A-Za-z0-9_]
# VARTAIL  {VARMID}*{IDTAIL}
# VAR      [$%]{LETTER}{VARTAIL}*
# ID       {LETTER}{IDTAIL}*
# ILID     [$%]{DIGIT}+{LETTER}{VARTAIL}*

pattern LETTER = 'A-Za-z'
pattern IDTAIL = 'A-Za-z0-9_'
pattern VARMID = ':A-Za-z0-9_'
pattern VARTAIL = '[$VARMID]*[$IDTAIL]'
pattern VAR = '[\$%][$LETTER]($VARTAIL)*'
pattern ID = '[$LETTER][$IDTAIL]*'
pattern WS = '\s\t\v\r\n' 
pattern OP = '!\#%&\(\)\*\+,-\.\/:;<=>\?@\[\]\^\{\}~|'

#pattern NMSTART = '$\w\x80-\xff'   # inside cset
#pattern CS = '$NMSTART\d_'   # inside cset
#pattern WS = '\s\t\r\n'           # inside cset
#pattern OP = '!\#%&\(\)\*\+,-\.\/:;<=>\?@\[\]\^\{\}~|'
#pattern NAMESEQ = '[$NMSTART][$CS]*'

# We need to do some processing to determine when a / in default state 
# starts a regex, and when it starts an RE
# Same with /<\w/ for e4x unquoted xml strings
# -- in fact, it's the same as for regexes, as both denote an object

initial IN_SSL_DEFAULT

state IN_SSL_DEFAULT:

# Just ignore these things -- they're here for ancient browsers



'/\*' : paint(upto, SSL_COMMENTBLOCK), => IN_SSL_COMMENT_1

'//' : paint(upto, SSL_COMMENT), => IN_SSL_COMMENT_LINE_1

/[$WS]+/  : #stay

# We have to lex numbers in states in case we reach EOF right after the
# "e" in a floating pt constant, for example

/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)
/[-+]?[0-9]/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_1
/true/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_BOOL
/false/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_BOOL

# A "." can start a number only if it doesn't follow a
# name, many keywords, string, regex, number, or a few 
# closing operators.

/\.\d/ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_2
/[-+]\./ : paint(upto, SSL_DEFAULT), => IN_SSL_NUMBER_2

'"' : paint(upto, SSL_DEFAULT), => IN_SSL_DSTRING
'\'' : paint(upto, SSL_DEFAULT), => IN_SSL_SSTRING

/$VAR/ : paint(upto, SSL_DEFAULT), paint(include, SSL_VARIABLE)
/$ID/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)
#/$NAMESEQ/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)


# Now a bunch of operators
# Multi-char operators first

/[$OP]/ : paint(upto, SSL_DEFAULT), redo, => IN_SSL_OP1

################ Comments ################

state IN_SSL_COMMENT_1 : 
'\*/' : paint(include, SSL_COMMENTBLOCK), => IN_SSL_DEFAULT

state IN_SSL_COMMENT_LINE_1:
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT


################ Strings ################

state IN_SSL_DSTRING:
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT
/\\[\r\n]/ : paint(include, SSL_STRING), => IN_SSL_DSTRING_LINECONT
/\\./ : #stay, Don't miscount backslash at end
/$/ : paint(upto, SSL_STRING), => IN_SSL_DEFAULT
'\r' : paint(upto, SSL_STRING), => IN_SSL_DEFAULT

# Work around the single-line match limit.

state IN_SSL_DSTRING_LINECONT:
/\\[\r\n]/ : #stay
/\\./ : => IN_SSL_DSTRING
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT
/./ : => IN_SSL_DSTRING
/^$/ : paint(upto, SSL_STRING), => IN_SSL_DEFAULT # End empty lines here

state IN_SSL_SSTRING:
'\'' : paint(include, SSL_REGEX), => IN_SSL_DEFAULT
/\\[\r\n]/ : paint(include, SSL_REGEX), => IN_SSL_SSTRING_LINECONT
/\\./ : #
/$/ : paint(upto, SSL_REGEX), => IN_SSL_DEFAULT
'\r' : paint(upto, SSL_REGEX), => IN_SSL_DEFAULT # /$/ doesn't match here with pcre

state IN_SSL_SSTRING_LINECONT:
/\\[\r\n]/ : #stay
/\\./ : => IN_SSL_SSTRING
"'" : paint(include, SSL_REGEX), => IN_SSL_DEFAULT
/./ : => IN_SSL_SSTRING
/^$/ : paint(upto, SSL_REGEX), => IN_SSL_DEFAULT # End empty lines here

################ Numbers ################

state IN_SSL_NUMBER_BOOL :
/./ : paint(upto, SSL_NUMBER), => IN_SSL_DEFAULT

state IN_SSL_NUMBER_1 :
'.' : => IN_SSL_NUMBER_2
/[\d]/ : #stay
/[Ee][-+]?/ : => IN_SSL_NUMBER_3
/./ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_NUMBER_2:
/[\d]/ : #stay
/[Ee][-+]?/ : => IN_SSL_NUMBER_3
'.' : paint(upto, SSL_NUMBER), paint(include, SSL_OPERATOR),  => IN_SSL_DEFAULT
/./ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_NUMBER_3:
/[^\d]/ : paint(upto, SSL_NUMBER), redo, => IN_SSL_DEFAULT

state IN_SSL_OP1:
# Single-char operator -- all ops work as standalone chars

/[$OP](?:(?![$OP])|$)/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT

# Otherwise look from longest to smallest
/>>>?=?/  : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
'>=' : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/!==?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/&&?=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/<<?=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/===?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/-[-=>]/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/\.\.\.?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/\^\^?=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/\|\|?=?/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
/[%*+\/>]=/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
'::' : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
'++' : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT
# The fallback
/[$OP]/ : paint(include, SSL_OPERATOR), => IN_SSL_DEFAULT

################ End States ################

# We might want to generalize this... by allowing named tokens.
# Currently we just wrap things with a token-check

# How to avoid specifying too much:

# Only reject list: accept all others
# Only accept list: reject everything else
# Only skip list: reject everything else, but 
# having only a set of skip items is redundant, as we'll end up rejecting

# If a style has two of the lists, the missing one is the default

# If a style has all three lists, anything else is rejected

token_check:
SSL_OPERATOR: reject [")", "++", "--", "]", "}"]

SSL_WORD: reject [class false function null private protected public super
this true get "include" set]

# All other keywords prefer an RE

SSL_DEFAULT: skip all
SSL_COMMENT: skip all
SSL_COMMENTBLOCK: skip all

# Default is to reject / as the start of a regex if it follows
# an unhandled style

#### SSL_IDENTIFIER: reject all
#### SSL_NUMBER: reject all
#### SSL_REGEX: reject all
#### SSL_STRING: reject all

# Fold info tokens

# Sometimes this should line up, when we're initializing an object.
# Hard to get this right without doing the same thing we do with
# Perl's notion of "variable indexer" vs. "operator".

fold "{" SSL_OPERATOR +
fold "}" SSL_OPERATOR -

fold "{{{" SSL_COMMENT +
fold "}}}" SSL_COMMENT -

fold "{{{" SSL_COMMENTBLOCK +
fold "}}}" SSL_COMMENTBLOCK -


